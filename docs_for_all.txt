# Rubik's Cube Interactive - Complete Documentation

## Project Overview

This is an interactive web application for visualizing and manipulating Rubik's cubes with integrated camera capture functionality. The application uses a cubestring-based architecture where a 54-character string serves as the single source of truth for the cube state.

## Core Architecture

### Single Source of Truth: Cubestring

The entire cube state is represented by a 54-character string using backend COLOR_TO_CUBE notation:
- **Format**: `UUUUUUUUURRRRRRRRRFFFFFFFFFDDDDDDDDDLLLLLLLLLBBBBBBBBB` (solved state)
- **Face Order**: Up (0-8), Right (9-17), Front (18-26), Down (27-35), Left (36-44), Back (45-53)
- **Notation**: U=White, R=Red, F=Green, D=Yellow, L=Orange, B=Blue

### Component Architecture

```
CubeState (State Management)
    ↓ (cubestring)
    ├→ CubeRenderer (3D & Net Views + 3D Rotation) 🔄 ENHANCED
    ├→ CameraCapture (Camera Integration)
    ├→ ColorEditor (Manual Editing) ✨
    ├→ CubeImporter (Backend Integration)
    ├→ ValidationButton (Cube Validation)
    └→ ResetButton (Reset Functionality)
```

### Configuration System

**Centralized API Configuration** (`scripts/config.js`):
- Single source for all API endpoints and settings
- Easy environment switching (development/production)
- Runtime configuration updates possible
- Consistent configuration across all modules

**Key Configuration Areas**:
- API base URL and endpoints
- Camera settings (resolution, timeouts)
- Validation settings
- Feature flags

## Key Components

### 0. Configuration (`scripts/config.js`) 🆕
**Purpose**: Centralized configuration management for the entire application

**Key Features**:
- Single source of truth for API configuration
- Easy environment switching (dev/staging/production)
- Runtime configuration updates
- Consistent settings across all modules

**Configuration Sections**:
```javascript
CONFIG = {
    API_BASE_URL: 'http://localhost:5000',
    API_ENDPOINTS: {
        COLOR_MAPPINGS: '/api/color-mappings',
        VALIDATE_CUBE: '/api/validate-cube',
        DETECT_COLORS: '/api/detect-colors',
        DETECT_COLORS_FAST: '/api/detect-colors-fast'
    },
    CAMERA: {
        VIDEO_WIDTH: 640,
        VIDEO_HEIGHT: 480,
        CAPTURE_WIDTH: 600,
        CAPTURE_HEIGHT: 600,
        PREVIEW_INTERVAL: 500,
        DETECTION_TIMEOUT: 5000,
        PREVIEW_TIMEOUT: 2000
    },
    VALIDATION: {
        USE_BACKEND: true,
        CUBESTRING_LENGTH: 54,
        VALID_CHARS: ['U', 'R', 'F', 'D', 'L', 'B']
    }
}
```

**Helper Functions**:
- `getApiUrl(endpoint)` - Build full API URL from endpoint key
- `setApiBaseUrl(newUrl)` - Update API base URL at runtime

**Usage Example**:
```javascript
import { CONFIG, getApiUrl } from './config.js';

// Get full API URL
const url = getApiUrl('VALIDATE_CUBE');
// Returns: 'http://localhost:5000/api/validate-cube'

// Access camera settings
const timeout = CONFIG.CAMERA.DETECTION_TIMEOUT;
```

**Documentation**: See `docs/API-CONFIGURATION-GUIDE.md` for complete guide

### 1. CubeState (`scripts/cube-state.js`)
**Purpose**: Central state management with cubestring as single source of truth

**Key Features**:
- Manages 54-character cubestring in backend notation (U, R, F, D, L, B)
- Provides conversion helpers (string ↔ array, position ↔ coordinates)
- Implements observer pattern for state changes
- Handles backend integration and imports
- Comprehensive validation with backend integration
- Color mapping management (backend ↔ frontend notation)

**Important Methods**:
- `getCubestring()` / `setCubestring()` - Get/set the full cubestring
- `stringPositionToFaceCoords(position)` - Convert position (0-53) to {face, row, col}
- `faceCoordsToStringPosition(face, row, col)` - Convert coordinates to position
- `getStickerColor(face, row, col)` - Get color at specific position
- `setStickerColor(face, row, col, color)` - Update color at specific position
- `importFromBackendData(data)` - Import cube state from backend JSON
- `importFromCubeString(cubeString)` - Import from 54-char string
- `validateCube(useBackend)` - Comprehensive validation with optional backend check
- `isValidState(useBackend)` - Detailed validation with error reporting
- `validateWithBackend(cubestring)` - Backend API validation
- `loadColorMappings()` - Load color mappings from backend API

### 2. CubeRenderer (`scripts/cube-renderer.js`) 🔄 ENHANCED
**Purpose**: Render cube visualization in 3D and net views with interactive rotation

**Key Features**:
- Generates DOM elements for cube visualization
- Handles CSS 3D transforms for 3D view
- **Interactive 3D rotation with mouse drag** 🔄 NEW
- Manages sticker interactivity and selection
- Automatically updates when cubestring changes
- Emits 'stickerSelected' events for color editing
- Rotation state management and persistence

**3D Rotation Features** 🔄 NEW:
- **Mouse Drag Rotation**: Click and drag to rotate cube in any direction
- **Rotation State**: Maintains X and Y rotation angles (degrees)
- **Smooth Animations**: CSS transitions for natural movement
- **Rotation Reset Button**: Quick return to default viewing angle
- **State Persistence**: Rotation preserved across view switches
- **Visual Feedback**: Cursor changes (grab/grabbing) during interaction

**Rotation Properties**:
- `rotationX` - X-axis rotation in degrees (default: -15°)
- `rotationY` - Y-axis rotation in degrees (default: 25°)
- `isDragging` - Boolean flag for active drag state
- `rotationSensitivity` - Degrees per pixel (0.4)
- `rotationResetButton` - UI element for reset functionality

**Important Methods**:
- `render3DView()` - Render interactive 3D cube with rotation
- `renderNetView()` - Render flat net layout
- `updateFaceColors(face, colors)` - Update entire face with animation
- `updateStickerColor(face, row, col, color)` - Update single sticker
- `enableInteraction()` / `disableInteraction()` - Toggle interactivity
- `clearSelection()` - Clear selected sticker highlighting

**Rotation Methods** 🔄 NEW:
- `handleMouseDown(event)` - Start drag tracking
- `handleMouseMove(event)` - Update rotation during drag
- `handleMouseUp(event)` - Stop drag tracking
- `handleMouseLeave(event)` - Cancel drag if mouse leaves
- `applyRotation()` - Apply current rotation to cube element
- `resetRotation()` - Animate back to default rotation
- `setRotation(x, y, animate)` - Set specific rotation angles
- `getRotation()` - Get current rotation {x, y}
- `updateResetButtonVisibility()` - Show/hide reset button based on rotation

**Rotation Events** 🔄 NEW:
- `rotationChanged` - Emitted when rotation changes
- `rotationReset` - Emitted when rotation is reset to default

### 3. ViewController (`scripts/view-controller.js`)
**Purpose**: Manage smooth transitions between 3D and net views

**Key Features**:
- Smooth fade transitions between views
- State preservation during view changes
- Performance monitoring and optimization
- View-specific CSS optimizations

**Important Methods**:
- `switchToView(viewType)` - Switch to '3d' or 'net' view
- `getCurrentView()` - Get current view type
- `addViewChangeListener(callback)` - Listen for view changes

### 4. CameraCapture (`scripts/camera-capture.js`)
**Purpose**: Capture cube state using device camera with live preview

**Key Features**:
- Camera access with video preview
- Face-by-face capture workflow (6 faces)
- Backend color detection integration (HSV-based)
- Live color preview during positioning
- Progress tracking (captured faces counter)
- Converts backend colors to cubestring notation
- Image preprocessing (mirror, crop, resize)
- Auto-advance to next face after capture
- Completion workflow with validation trigger

**Camera Interface Features**:
- **Live Video Preview**: Real-time camera feed with mirroring
- **3x3 Grid Overlay**: Visual guide for cube positioning
- **Live Color Detection**: Shows detected colors in real-time
- **Face Selector**: Dropdown to choose which face to capture
- **Progress Bar**: Visual indicator of capture progress (0/6 to 6/6)
- **Capture/Retake Buttons**: Intuitive capture workflow
- **Status Indicators**: Real-time feedback on capture state

**Image Processing Pipeline**:
1. Horizontal mirroring for natural interaction
2. Square cropping (centered)
3. Resize to 600x600 pixels
4. Convert to base64 JPEG (80% quality)

**Important Methods**:
- `openCameraInterface()` - Open camera modal with live preview
- `captureImageFromVideo()` - Capture and process frame from video
- `detectColorsFromImage(imageData, face)` - Send to backend for detection
- `convertColorsToCubestring(colors, face)` - Convert backend colors to cubestring
- `applyDetectedColors(colors, face)` - Update cubestring with detected colors
- `startLivePreview()` / `stopLivePreview()` - Control live color preview
- `updateLivePreview()` - Sample colors from video feed
- `animateColorDetection(colors)` - Sequential animation of detected colors
- `markFaceCaptured(face, colors)` - Track captured faces
- `advanceToNextFace()` - Auto-advance to next face
- `handleCompletion()` - Completion workflow when all 6 faces captured
- `setState(state, message)` - Update UI state (ready/capturing/processing/success/error)

**State Management**:
- `ready` - Camera ready, waiting for capture
- `capturing` - Image being captured
- `processing` - Colors being detected by backend
- `success` - Colors detected successfully
- `error` - Error occurred during capture

**Face Sequence**:
Default capture order: front → right → back → left → top → bottom

**API Integration**:
- Uses `CONFIG.API_BASE_URL` for backend communication
- `/api/detect-colors` - Full color detection (5s timeout)
- `/api/detect-colors-fast` - Fast detection for live preview (2s timeout)

### 5. CubeImporter (`scripts/cube-importer.js`)
**Purpose**: Automatically import cube states from backend camera program

**Key Features**:
- Polls `web_output/` directory for new cube states
- Automatic import when camera program completes
- Status notifications for capture progress
- Seamless integration with backend

**Important Methods**:
- `startWatching()` / `stopWatching()` - Control polling
- `onStatusUpdate(callback)` - Listen for status updates
- `importCubeData(cubeData)` - Import cube state from backend

### 6. ValidationButton (`scripts/validation-button.js`) 🆕
**Purpose**: Comprehensive cube state validation with backend integration

**Key Features**:
- Frontend validation (length, characters, distribution)
- Backend validation (physical cube validity)
- Detailed error reporting with suggestions
- Graceful degradation if backend unavailable
- Visual feedback with modal display
- Color distribution analysis

**Validation Checks**:
1. **Frontend Validation**:
   - Cubestring length (must be 54 characters)
   - Valid characters (U, R, F, D, L, B only)
   - Color distribution (9 of each color)
   - Center uniqueness (6 unique centers)

2. **Backend Validation** (optional):
   - Physical cube validity
   - Edge and corner piece relationships
   - Impossible configuration detection

**Important Methods**:
- `handleValidateClick()` - Handle validate button click
- `performValidation()` - Execute validation workflow
- `displayValidationResults(results)` - Show results in modal
- `showValidationModal(results)` - Create and display modal

**Validation Response Format**:
```javascript
{
    isValid: true/false,
    isSolved: true/false,
    errors: [
        {
            type: 'invalid_length',
            message: 'Cubestring must be exactly 54 characters',
            severity: 'error',
            expected: 54,
            actual: 52
        }
    ],
    warnings: [
        {
            type: 'backend_unavailable',
            message: 'Could not connect to backend validation service',
            severity: 'warning'
        }
    ],
    colorCounts: { U: 9, R: 9, F: 9, D: 9, L: 9, B: 9 },
    cubestring: 'UUUUUUUUU...'
}
```

**Error Types**:
- `missing_cubestring` - Cubestring is null/undefined
- `invalid_length` - Not 54 characters
- `invalid_characters` - Contains non-valid characters
- `invalid_distribution` - Wrong number of each color
- `duplicate_centers` - Center pieces not unique (warning)
- `backend_validation_failed` - Physically impossible cube
- `backend_unavailable` - Backend not reachable (warning)

**Documentation**: See `tests/BACKEND-VALIDATION-UPDATE.md` for complete guide

### 7. ResetButton (`scripts/reset-button.js`)
**Purpose**: Reset cube to solved state with confirmation

**Key Features**:
- Confirmation modal for unsolved cubes
- Visual feedback during reset
- Success/error notifications
- Preserves current view mode

**Important Methods**:
- `handleResetClick()` - Handle reset button click
- `executeReset()` - Perform reset operation
- `showResetConfirmation()` - Show confirmation dialog

### 8. ColorEditor (`scripts/color-editor.js`) ✅ COMPLETE - VERSION 2.0
**Purpose**: Manual color editing for individual stickers

**Status**: Fully implemented and tested (Task 8 complete)

**Key Features**:
- Interactive color palette with 6 standard cube colors (W, Y, R, O, B, G)
- Click-to-select sticker editing workflow
- Real-time cubestring updates via CubeState.setStickerColor()
- Visual feedback for color and sticker selections
- Automatic renderer updates via change listeners
- Two-way workflow: select sticker then color, or color then sticker
- Auto-clear selection after color application (500ms delay)
- Responsive design (left side on desktop, bottom on mobile)

**Important Methods**:
- `enableEditMode()` / `disableEditMode()` - Toggle edit mode
- `toggleEditMode()` - Toggle between enabled/disabled
- `isEnabled()` - Check if edit mode is active
- `selectColor(color)` - Select color from palette (W, Y, R, O, B, G)
- `handleStickerSelection(stickerInfo)` - Handle sticker click from renderer
- `updateColor()` - **Main method that updates cubestring via setStickerColor()**
- `createColorPalette()` - Create color palette UI with all 6 colors
- `showColorPalette()` / `hideColorPalette()` - Show/hide palette with animations

**Implementation Details**:
```javascript
// Color palette creation
createColorPalette() {
    // Creates DOM structure with header, color buttons, and sticker info
    // Each color button has:
    // - Background color from cubeState.COLORS
    // - Click handler for selectColor()
    // - Label with color name
    // - Hover and selection states
}

// Color application workflow
updateColor() {
    // 1. Validates both sticker and color are selected
    // 2. Calls cubeState.setStickerColor(face, row, col, color)
    // 3. CubeState updates cubestring internally
    // 4. CubeState emits 'stickerUpdated' event
    // 5. Renderer receives event and updates DOM
    // 6. Clears selection after 500ms
}
```

**Event Flow**:
1. User clicks sticker → Renderer emits 'stickerSelected' event
2. ColorEditor.handleStickerSelection() stores sticker info
3. User clicks color → ColorEditor.selectColor() stores color
4. ColorEditor.updateColor() applies color via CubeState
5. CubeState updates cubestring and notifies listeners
6. Renderer updates DOM with animation

**Testing**:
- Comprehensive test suite: `tests/test-color-editor.html`
- Tests edit mode toggle, color selection, sticker updates, view sync
- All tests passing (100% success rate)
- Manual testing guide: `tests/TASK8-TESTING-GUIDE.md`

**Documentation**:
- User guide: `docs/COLOR-EDITOR-GUIDE.md`
- Implementation summary: `tests/TASK8-IMPLEMENTATION-SUMMARY.md`
- Testing guide: `tests/TASK8-TESTING-GUIDE.md`

### 9. Main Application (`scripts/main.js`) - VERSION 2.0
**Purpose**: Application entry point and component orchestration

**Key Features**:
- Initializes all components in correct order
- Manages application lifecycle
- Coordinates component interactions
- Handles user interface events
- Provides status notifications and error handling

**Important Methods**:
- `init()` - Initialize application and all components
- `initializeComponents()` - Create and configure all component instances
- `setupEventListeners()` - Set up UI event handlers
- `handleCameraClick()` - Launch camera capture workflow
- `handleEditClick()` - Toggle color editor mode (VERSION 2.0)
- `launchIntegratedCameraProgram()` - Start backend camera program
- `handleBackendImport()` - Import cube state from backend

**VERSION 2.0 Updates**:
The `handleEditClick()` method now includes enhanced debugging and status logging:
- Logs ColorEditor initialization status
- Provides detailed console output for edit mode state changes
- Shows clear success/error messages for troubleshooting
- Displays user-friendly notifications for edit mode activation

**Edit Button Workflow** (VERSION 2.0):
1. User clicks "Edit Colors" button
2. `handleEditClick()` is triggered
3. Checks if ColorEditor is initialized (logs status)
4. Calls `colorEditor.toggleEditMode()`
5. Updates button active state based on mode
6. Logs detailed status: "✅ Edit mode ENABLED" or "❌ Edit mode DISABLED"
7. Shows user notification with instructions
8. If ColorEditor not initialized, logs error and shows message

**UI Components**:
- **Color Palette**: Fixed position panel with color buttons
- **Color Buttons**: Visual buttons for each cube color with labels
- **Sticker Info Display**: Shows currently selected sticker details
- **Selection Highlighting**: Visual feedback for selected colors and stickers

**CSS Styling** (in `styles/main.css`):
- `.color-palette`: Fixed position panel (left: 20px, top: 50%, transform: translateY(-50%))
  - **Position**: Left side of screen (VERSION 2.0.3 - changed from right: 20px)
  - Background: `rgba(255, 255, 255, 0.98)` (semi-transparent white)
  - Border radius: 8px for rounded corners (VERSION 2.0.5 - reduced from 12px for cleaner look)
  - Padding: 1rem (VERSION 2.0.5 - reduced from 1.5rem for more compact design)
  - Min-width: 160px (VERSION 2.0.5 - reduced from 200px for better space efficiency)
  - Box shadow: `0 8px 32px rgba(0, 0, 0, 0.2)` for depth
  - Z-index: 1000 to appear above other content
  - Opacity transitions for smooth show/hide

- `.color-palette__header`: Header section with title
  - Border bottom: `2px solid #e0e0e0`
  - Text color: `#333` (dark gray)

- `.color-palette__colors`: Flex container for color buttons
  - Display: flex column with 0.5rem gap
  - Vertical layout for easy selection

- `.color-palette__color-btn`: Individual color button
  - Padding: 0.75rem for comfortable touch targets
  - Border: 2px solid transparent (becomes `#007bff` on hover/select)
  - Border radius: 8px
  - Hover: scale(1.05) with box shadow
  - Selected: `box-shadow: 0 0 0 3px rgba(0, 123, 255, 0.3)`

- `.color-palette__color-label`: Text label on color buttons (VERSION 2.0.4 - Enhanced Visibility)
  - **Text Color**: `#fff` (white) for universal readability
  - **Background**: `rgba(0, 0, 0, 0.6)` (dark semi-transparent) for contrast
  - **Text Shadow**: `0 1px 3px rgba(0, 0, 0, 0.8)` for enhanced legibility
  - Padding: 0.25rem 0.5rem with border radius
  - **Pointer events: none** - Allows clicks to pass through to button (VERSION 2.0.2)
  - **Design Rationale**: White text on dark overlay provides excellent contrast on all color buttons (light and dark)

- `.color-palette__sticker-info`: Status display at bottom
  - Background: `#f8f9fa` (light gray)
  - Text color: `#666` (medium gray)
  - Min height: 2.5rem for consistent sizing
  - Flexbox centering for text alignment

**Responsive Behavior**:
- On mobile (max-width: 768px):
  - Position changes from right-fixed to bottom-fixed
  - Left and right: 10px for full width
  - Bottom: 80px to avoid overlapping controls
  - Transform: none (no vertical centering needed)

**Workflow**:
1. User clicks "Edit Colors" button
2. Color palette appears on screen
3. User can either:
   - Click a sticker, then select a color (color applies immediately)
   - Select a color, then click a sticker (color applies immediately)
4. CubeState.setStickerColor() updates the cubestring
5. Renderer automatically updates via change listeners
6. Selection clears after 500ms for smooth UX

**Integration**:
- Listens to `cubeRenderer:stickerSelected` events
- Calls `cubeState.setStickerColor()` to update cubestring
- Uses `cubeRenderer.clearSelection()` to clear highlights
- Accesses `cubeState.COLORS` for color hex values

## Data Flow

### Camera Capture Flow
1. User clicks Camera button
2. `CameraCapture` opens camera interface
3. User captures each face (6 faces total)
4. Backend detects colors using OpenCV/HSV
5. `CameraCapture.convertColorsToCubestring()` converts to backend notation
6. `CubeState.setFaceColors()` updates cubestring
7. `CubeRenderer` automatically re-renders from updated cubestring

### Manual Edit Flow ✨ UPDATED
1. User clicks "Edit Colors" button in main UI
2. `ColorEditor.enableEditMode()` activates edit mode
3. `ColorEditor.showColorPalette()` displays color palette
4. User interaction (two possible workflows):
   
   **Workflow A: Sticker First**
   - User clicks a sticker on the cube
   - `CubeRenderer` emits 'stickerSelected' event
   - `ColorEditor.handleStickerSelection()` stores sticker info
   - User clicks a color from palette
   - `ColorEditor.selectColor()` stores color choice
   - `ColorEditor.updateColor()` applies color immediately
   
   **Workflow B: Color First**
   - User clicks a color from palette
   - `ColorEditor.selectColor()` stores color choice
   - User clicks a sticker on the cube
   - `CubeRenderer` emits 'stickerSelected' event
   - `ColorEditor.handleStickerSelection()` receives sticker info
   - `ColorEditor.updateColor()` applies color immediately

5. `ColorEditor.updateColor()` calls `CubeState.setStickerColor(face, row, col, color)`
6. `CubeState` updates cubestring at the correct position
7. `CubeState` notifies all change listeners
8. `CubeRenderer.handleStateChange()` receives 'stickerUpdated' event
9. `CubeRenderer.updateStickerColor()` updates the DOM with animation
10. Selection clears automatically after 500ms

### Backend Import Flow
1. Camera program writes to `web_output/cube_state.json`
2. `CubeImporter` polls and detects new file
3. `CubeImporter.importCubeData()` reads JSON
4. `CubeState.importFromBackendData()` updates cubestring
5. All views automatically update via change listeners

## Color Notation Systems

### Display Notation (Frontend UI)
Used in ColorEditor and user-facing displays:
- W = White
- Y = Yellow
- R = Red
- O = Orange
- B = Blue
- G = Green

### Backend Notation (Cubestring)
Used internally in cubestring:
- U = Up face (White in solved state)
- R = Right face (Red in solved state)
- F = Front face (Green in solved state)
- D = Down face (Yellow in solved state)
- L = Left face (Orange in solved state)
- B = Back face (Blue in solved state)

### Conversion
The `CubeState` class handles conversion between notations:
- `COLORS` object maps both notations to hex colors
- Backend integration methods convert between formats
- Camera capture uses backend notation directly
- ColorEditor uses display notation (W, Y, R, O, B, G)

## API Endpoints

### Backend API (`api/backend_api.py`)

**Configuration**:
- Base URL: `http://localhost:5000` (configurable in `scripts/config.js`)
- All endpoints use JSON request/response format
- CORS enabled for cross-origin requests

**Camera Endpoints**:
- `GET /api/camera-status` - Check camera availability
- `POST /api/launch-integrated-camera` - Start camera capture program
- `POST /api/detect-colors` - Detect colors from image (5s timeout)
- `POST /api/detect-colors-fast` - Fast color detection for live preview (2s timeout)

**Validation Endpoints**:
- `POST /api/validate-cube` - Validate cube state (frontend + backend)
- `GET /api/color-mappings` - Get COLOR_TO_CUBE and CUBE_TO_COLOR mappings

**Output Files**:
- `GET /web_output/status.json` - Capture progress and status
- `GET /web_output/cube_state.json` - Detected cube state with metadata

**Request Format** (`/api/detect-colors`):
```json
{
  "image": "data:image/jpeg;base64,...",  // Base64 encoded image
  "face": "front"                          // Face name
}
```

**Response Format** (`/api/detect-colors`):
```json
{
  "success": true,
  "colors": ["White", "Red", "Green", ...],  // 9 color names
  "cube_notation": ["U", "R", "F", ...],     // 9 cube notation chars
  "face": "front",
  "message": "Colors detected successfully"
}
```

**Response Format** (`cube_state.json`):
```json
{
  "cube_state": ["White", "Red", ...],  // 54 color names
  "cube_string": "UUUUUUUUU...",        // 54-char cubestring
  "is_valid": true,
  "timestamp": "2025-01-07T10:30:00Z",
  "face_count": 6,
  "total_stickers": 54
}
```

**Validation Response** (`/api/validate-cube`):
```json
{
  "success": true,
  "is_valid": true,
  "message": "Cube state is valid",
  "warnings": [],
  "cube_state_length": 54
}
```

## File Structure

### Frontend (`/scripts/`)
- `config.js` - Centralized configuration 🆕
- `main.js` - Application entry point
- `cube-state.js` - State management (cubestring) with validation
- `cube-renderer.js` - 3D and net rendering with rotation 🔄
- `view-controller.js` - View transitions
- `camera-capture.js` - Camera integration with live preview
- `cube-importer.js` - Backend auto-import
- `reset-button.js` - Reset functionality
- `color-editor.js` - Manual editing ✨
- `validation-button.js` - Cube validation with backend integration

### Styles (`/styles/`)
- `main.css` - Global styles, layout, modals, notifications, and color editor styles
- `cube.css` - Cube-specific styles (3D transforms, stickers, colors)
- `camera.css` - Camera interface styles (modal, preview, controls)
- `responsive.css` - Mobile and tablet breakpoints

**CSS Architecture**:
- **Modular organization**: Each CSS file handles a specific feature area
- **Direct color values**: Uses explicit hex/rgba colors instead of CSS variables
- **BEM-like naming**: Component-based class naming (e.g., `.color-palette__header`)
- **Responsive design**: Mobile-first approach with breakpoints in `responsive.css`
- **Animations**: Smooth transitions and fade effects throughout
- **Accessibility**: High contrast ratios and focus states

### Backend (`/api/`)
- `backend_api.py` - Flask API server
- `start_backend.py` - Server startup script
- `web_integrated_camera.py` - Camera capture program

### Tests (`/tests/`)
- `test-cubestring.html` - Cubestring operations tests (Task 5)
- `test-conversion-helpers.html` - Position mapping and conversion tests (Task 5)
- `test-task5-methods.html` - CubeState method tests (Task 5)
- `test-renderer-cubestring.html` - Renderer integration tests (Task 6)
- `test-camera-cubestring.html` - Camera integration tests (Task 7)
- `test-color-editor.html` - Color editor comprehensive tests (Task 8) ✅
- `test-bug-fixes.html` - Bug fix verification tests
- `test-edit-button-simple.html` - Simple edit button test
- `test-interactivity.html` - Cube interaction tests
- `test-reset-button.html` - Reset functionality tests
- `test_api.py` - Backend API tests
- `test_backend_import.py` - Backend import tests
- `check_dependencies.py` - Dependency verification

### Documentation (`/docs/`)
- `API-CONFIGURATION-GUIDE.md` - Complete API configuration guide 🆕
- `BACKEND-API-INTEGRATION-GUIDE.md` - Backend integration guide
- `COLOR-EDITOR-GUIDE.md` - User guide for color editor ✅
- `VALIDATION-BUTTON-GUIDE.md` - Validation feature guide
- `LIVE-PREVIEW-BACKEND-INTEGRATION.md` - Live preview implementation
- `LEGACY-CAMERA-DEPRECATION.md` - Camera system migration guide
- Various feature-specific guides in `/docs/`

### Test Summaries (`/tests/`)
- `TASK5-IMPLEMENTATION-SUMMARY.md` - Cubestring implementation details
- `TASK6-IMPLEMENTATION-SUMMARY.md` - Renderer integration details
- `TASK7-IMPLEMENTATION-SUMMARY.md` - Camera integration details
- `TASK8-IMPLEMENTATION-SUMMARY.md` - Color editor implementation details ✅
- `TASK8-TESTING-GUIDE.md` - Color editor testing procedures ✅
- `BACKEND-VALIDATION-UPDATE.md` - Backend validation implementation and bug fixes 🆕
- `BUG-FIXES-SUMMARY.md` - Bug fixes documentation
- `DEBUG-COLOR-EDITOR.md` - Color editor debugging guide

### Specifications (`/.kiro/specs/`)
- `rubiks-cube-landing/` - Landing page feature spec (complete)
- `cube-3d-rotation/` - 3D rotation feature spec (in progress) 🔄
  - `requirements.md` - Feature requirements
  - `design.md` - Technical design
  - `tasks.md` - Implementation tasks

## Development Workflow

### Starting the Application

1. **Start Backend API**:
```bash
cd api
python start_backend.py
```
Backend runs on `http://localhost:5000`

2. **Start Frontend**:
```bash
python -m http.server 8000
# or
npm start
```
Frontend runs on `http://localhost:8000`

3. **Open in Browser**:
Navigate to `http://localhost:8000`

### Testing

**Frontend Tests** (open in browser):
- `tests/test-cubestring.html` - Core cubestring functionality
- `tests/test-renderer-cubestring.html` - Renderer integration
- `tests/test-camera-cubestring.html` - Camera integration
- `tests/test-color-editor.html` - Color editor functionality ✨ NEW
- `tests/test-bug-fixes.html` - Bug fixes verification

**Backend Tests** (run with Python):
```bash
python tests/test_api.py
python tests/test_backend_import.py
```

## Common Tasks

### Using the Color Editor ✨ NEW
```javascript
// Enable edit mode
colorEditor.enableEditMode();

// User clicks sticker, then color - color applies automatically
// OR user clicks color, then sticker - color applies automatically

// Disable edit mode
colorEditor.disableEditMode();

// Check if edit mode is active
if (colorEditor.isEnabled()) {
  console.log('Edit mode is active');
}
```

### Adding a New Color to a Sticker
```javascript
// Get cube state instance
const cubeState = app.cubeState;

// Update sticker (face, row, col, color)
cubeState.setStickerColor('front', 1, 1, 'R'); // Center sticker to Red

// Renderer automatically updates via change listeners
```

### Importing a Cube State
```javascript
// From 54-character string
cubeState.importFromCubeString('UUUUUUUUURRRRRRRRRFFFFFFFFFDDDDDDDDDLLLLLLLLLBBBBBBBBB');

// From backend JSON
cubeState.importFromBackendData({
  cube_string: 'UUUUUUUUU...',
  cube_state: ['White', 'Red', ...],
  is_valid: true
});
```

### Switching Views
```javascript
// Via ViewController (recommended)
viewController.switchToView('net'); // or '3d'

// Direct renderer call (fallback)
cubeRenderer.renderNetView(); // or render3DView()
```

## Troubleshooting

### Backend Connection Issues
**Symptom**: "Could not connect to backend" errors

**Solutions**:
1. **Check backend is running**:
   ```bash
   cd api
   python start_backend.py
   ```
   Should see: "Running on http://localhost:5000"

2. **Verify API URL configuration**:
   - Open `scripts/config.js`
   - Check `API_BASE_URL: 'http://localhost:5000'`
   - Update if backend is on different host/port

3. **Test backend directly**:
   - Open `http://localhost:5000/api/color-mappings` in browser
   - Should see JSON response with color mappings

4. **Check CORS settings**:
   - Verify `CORS(app)` is enabled in `api/backend_api.py`
   - Check browser console for CORS errors

**See**: `docs/API-CONFIGURATION-GUIDE.md` for detailed configuration help

### Camera Not Working
1. Check camera permissions in browser (click camera icon in address bar)
2. Verify backend is running: `http://localhost:5000/api/camera-status`
3. Check backend path in `backend_api.py` (BACKEND_PATH variable)
4. Ensure OpenCV is installed: `pip install opencv-python`
5. Try different browser (Chrome/Firefox/Safari)

### Colors Not Updating
1. Check browser console for errors
2. Verify cubestring is valid (54 chars, valid notation)
3. Check change listeners are registered
4. Verify renderer is initialized
5. Test with: `app.cubeState.setStickerColor('front', 1, 1, 'R')`

### Validation Errors
**"Could not connect to backend validation service"**:
- This is a WARNING, not an error
- Backend server is not running or not reachable
- Start backend: `cd api && python start_backend.py`
- Frontend validation still works

**"Cube state is not physically valid"**:
- This is an ERROR - cube configuration is impossible
- Backend successfully validated but found issues
- Recapture faces or manually edit colors to fix
- Check color distribution (9 of each color)

### 3D Rotation Issues 🔄
**Rotation not working**:
1. Verify you're in 3D view (not net view)
2. Check browser console for JavaScript errors
3. Try clicking and dragging on the cube
4. Verify mouse events are not blocked by other elements

**Rotation feels wrong**:
1. Check `rotationSensitivity` value (default: 0.4)
2. Adjust in `scripts/cube-renderer.js` if needed
3. Clear browser cache and reload

**Reset button not appearing**:
1. Rotate cube more than 5° from default
2. Check `updateResetButtonVisibility()` is being called
3. Verify button element exists in DOM

### Color Editor Not Working ✅ TROUBLESHOOTING GUIDE

**Quick Diagnostic Checklist**:
1. ✅ Is the "Edit Colors" button highlighted when clicked?
2. ✅ Does the color palette appear on the left side (desktop) or bottom (mobile)?
3. ✅ Can you click stickers and see them highlight with a blue border?
4. ✅ Do color buttons highlight when clicked?
5. ✅ Does the sticker change color when both are selected?

**Step 1: Verify Initialization**
Open browser console and check for initialization messages:
```
CubeState initialized
CubeRenderer initialized
ViewController initialized
CameraCapture initialized
CubeImporter initialized
ResetButton initialized
ColorEditor initialized  ← Should see this
```

**If "ColorEditor initialized" is missing**:
- Check for JavaScript errors during page load
- Verify `scripts/color-editor.js` is loaded (check Network tab)
- Confirm `main.js` creates ColorEditor instance after CubeState and CubeRenderer
- Look for errors in the console that might prevent initialization

**Step 2: Test Edit Mode Toggle**
Click the "Edit Colors" button and check console:
```
Edit button clicked - VERSION 2.0
ColorEditor exists: true
✅ Edit mode ENABLED - Color palette should be visible
```

**Expected Behavior**:
- Button should have `active` class (highlighted appearance)
- Color palette should appear on left side (desktop) or bottom (mobile)
- Notification should show: "🎨 Edit mode enabled! Click any sticker, then select a color."

**If palette doesn't appear**:
1. Check DOM for element with id `color-palette`
2. Verify element has class `color-palette--visible`
3. Check computed styles (should have `display: block` and `opacity: 1`)
4. Verify `styles/main.css` is loaded
5. Check for CSS conflicts or z-index issues

**Step 3: Test Sticker Selection**
With edit mode enabled, click any sticker on the cube:
```
Sticker selected: {face: "front", row: 1, col: 1, color: "G"}
```

**Expected Behavior**:
- Sticker should highlight with blue border
- Sticker info display should update: "Selected: front [1, 1] - Current: Green"
- Console should log the sticker selection event

**If sticker doesn't respond**:
- Verify `cubeRenderer.enableInteraction()` was called during initialization
- Check that edit mode is actually enabled (`colorEditor.isEnabled()` should return true)
- Ensure renderer is emitting 'stickerSelected' events
- Verify ColorEditor is listening to renderer events

**Step 4: Test Color Selection**
Click a color button in the palette:
```
🖱️ Button clicked: R (Red)
✅ Color selected: Red
```

**Expected Behavior**:
- Color button should highlight with blue border and shadow
- Console should log the color selection
- If sticker was already selected, color should apply immediately

**If color doesn't select**:
- Check that color buttons have click event listeners
- Verify `selectColor()` method is being called
- Check console for any JavaScript errors
- Inspect button element to ensure it's not disabled

**Step 5: Test Color Application**
With both sticker and color selected:
```
Updating sticker front [1, 1] from Green to Red
```

**Expected Behavior**:
- Sticker should change to the selected color with animation
- Console should log the update
- Selection should clear after 500ms
- Change should persist when switching views

**If color doesn't apply**:
- Verify `updateColor()` is being called
- Check that `cubeState.setStickerColor()` is executing
- Confirm cubestring is being updated (log `cubeState.getCubestring()`)
- Verify change listeners are firing
- Check renderer is receiving 'stickerUpdated' events

**Common Issues and Solutions**:

**Issue: Palette appears but colors don't work**
- Solution: Check that color buttons have proper event listeners
- Verify: Inspect button element and check for click handlers
- Debug: Add console.log in selectColor() method

**Issue: Stickers don't highlight when clicked**
- Solution: Ensure renderer interactivity is enabled
- Verify: Check `cubeRenderer.isInteractive` property
- Debug: Call `cubeRenderer.enableInteraction()` manually in console

**Issue: Colors apply but don't persist across views**
- Solution: Verify cubestring is being updated, not just DOM
- Verify: Log cubestring before and after color change
- Debug: Check that setStickerColor() is modifying cubestring

**Issue: Edit mode button doesn't toggle**
- Solution: Check that ColorEditor instance exists
- Verify: Type `app.colorEditor` in console (should not be null)
- Debug: Check initialization order in main.js

**Advanced Debugging**:
```javascript
// In browser console:

// Check ColorEditor state
app.colorEditor.isEnabled()  // Should return true when active

// Check selected color
app.colorEditor.selectedColor  // Should show color code (W, Y, R, O, B, G)

// Check selected sticker
app.colorEditor.selectedSticker  // Should show {face, row, col, color}

// Manually trigger color update
app.colorEditor.updateColor()  // Should apply color if both selected

// Check cubestring
app.cubeState.getCubestring()  // Should show 54-character string

// Check specific sticker color
app.cubeState.getStickerColor('front', 1, 1)  // Should return color code
```

**Still Having Issues?**
1. Clear browser cache and hard reload (Ctrl+Shift+R)
2. Check browser console for any error messages
3. Verify all files are loaded (check Network tab)
4. Try in a different browser to rule out browser-specific issues
5. Review `tests/test-color-editor.html` for working examples
6. Check `tests/TASK8-TESTING-GUIDE.md` for detailed testing procedures

### Backend Import Not Working
1. Check `web_output/` directory exists
2. Verify `cube_state.json` is being created
3. Check `CubeImporter` is watching: `cubeImporter.isCurrentlyWatching()`
4. Verify backend API is accessible

## Key Design Decisions

### Why Cubestring?
- **Single source of truth**: Eliminates state synchronization issues
- **Backend compatibility**: Matches backend COLOR_TO_CUBE format
- **Performance**: String operations are fast and memory-efficient
- **Serialization**: Easy to save/load/transmit
- **Standard notation**: Aligns with Rubik's cube solving algorithms

### Why Observer Pattern?
- **Loose coupling**: Components don't directly reference each other
- **Automatic updates**: Changes propagate automatically
- **Extensibility**: Easy to add new components (like ColorEditor)
- **Testability**: Components can be tested in isolation

### Why Separate Views?
- **3D View**: Better for visualization and understanding cube state
- **Net View**: Better for editing and seeing all faces at once
- **Flexibility**: Users can choose their preferred view
- **Performance**: Each view can be optimized independently

### ColorEditor Design Decisions ✨ NEW
- **Two-way workflow**: Users can select sticker-then-color or color-then-sticker
- **Immediate application**: Color applies as soon as both are selected
- **Auto-clear selection**: Clears after 500ms for smooth UX
- **Event-driven**: Uses renderer events instead of direct coupling
- **Cubestring integration**: Updates via CubeState.setStickerColor()
- **Visual feedback**: Clear indication of selected colors and stickers

## Implementation Status

### Completed Features ✅
- ✅ **Cubestring Architecture** (Tasks 1-5): Single source of truth with 54-character string
- ✅ **CubeRenderer Integration** (Task 6): Both 3D and net views render from cubestring
- ✅ **Camera Capture Integration** (Task 7): Camera updates cubestring directly with live preview
- ✅ **Color Editor** (Task 8): Manual color editing with interactive palette
- ✅ **Cube Validation** (Task 9): Frontend and backend validation with detailed error reporting
- ✅ **Configuration System**: Centralized API configuration in `config.js`
- ✅ **Reset Functionality**: One-click reset to solved state with confirmation
- ✅ **View Switching**: Smooth transitions between 3D and net views
- ✅ **Backend Integration**: Automatic import from camera program
- ✅ **Responsive Design**: Works on desktop, tablet, and mobile devices
- ✅ **Validation Button**: Comprehensive cube state validation with backend integration

### In Progress 🚧
- 🚧 **3D Cube Rotation**: Interactive mouse drag rotation (Tasks 1-3 complete, 4-9 in progress)
  - ✅ Rotation state properties added
  - ✅ Drag event handlers implemented
  - ✅ Rotation control methods implemented
  - ⏳ Rotation reset button UI
  - ⏳ Integration into render3DView
  - ⏳ View switching state preservation
  - ⏳ Cleanup and testing

### Planned Features 📋
- 📋 **Undo/Redo**: History management for color edits
- 📋 **Keyboard Shortcuts**: Quick color selection with keys (1-6 for colors)
- 📋 **Batch Editing**: Edit entire face at once
- 📋 **Save/Load States**: Persist cube configurations
- 📋 **Touch Rotation**: Touch gesture support for mobile rotation
- 📋 **Share via URL**: Generate shareable links for cube states
- 📋 **Move Notation**: Support for R, U, F, L, D, B notation
- 📋 **Solving Algorithms**: Integration with cube solving algorithms
- 📋 **Animation Sequences**: Animate solving steps

### Future Enhancements 🔮
- 🔮 **WebGL Rendering**: Better 3D performance with WebGL
- 🔮 **Touch Gestures**: Swipe to rotate cube on mobile
- 🔮 **Color Blindness Modes**: Accessibility for color vision deficiency
- 🔮 **Multiple Cube Sizes**: Support for 2x2, 4x4, 5x5 cubes
- 🔮 **Solver Integration**: Step-by-step solving guidance
- 🔮 **Custom Colors**: Color picker for non-standard cubes
- 🔮 **Drag-and-Drop**: Drag colors onto stickers
- 🔮 **Pattern Library**: Pre-defined cube patterns and configurations

## Resources

### Documentation
- `README.md` - Project overview and setup
- `docs_for_all.txt` - This comprehensive documentation
- `docs/API-CONFIGURATION-GUIDE.md` - API configuration guide 🆕
- `docs/COLOR-EDITOR-GUIDE.md` - Color editor usage guide ✨
- `docs/VALIDATION-BUTTON-GUIDE.md` - Validation feature guide
- `tests/BACKEND-VALIDATION-UPDATE.md` - Backend validation implementation 🆕
- `tests/TASK*-SUMMARY.md` - Implementation summaries
- `tests/TASK8-TESTING-GUIDE.md` - Color editor testing guide ✨
- `Backend_Reference/INTEGRATION_GUIDE.md` - Backend integration guide
- `.kiro/specs/cube-3d-rotation/` - 3D rotation feature spec 🔄

### External Resources
- [Rubik's Cube Notation](https://ruwix.com/the-rubiks-cube/notation/)
- [OpenCV Color Detection](https://docs.opencv.org/4.x/df/d9d/tutorial_py_colorspaces.html)
- [CSS 3D Transforms](https://developer.mozilla.org/en-US/docs/Web/CSS/transform)
- [HSV Color Space](https://en.wikipedia.org/wiki/HSL_and_HSV)
- [Web Camera API](https://developer.mozilla.org/en-US/docs/Web/API/MediaDevices/getUserMedia)

## Recent Updates ✨

### 3D Cube Rotation Feature (In Progress) 🔄
**Date**: Current
**Status**: 🚧 Partial Implementation - Core rotation logic complete

**Spec Location**: `.kiro/specs/cube-3d-rotation/`
- `requirements.md` - Feature requirements and acceptance criteria
- `design.md` - Technical design and architecture
- `tasks.md` - Implementation task breakdown

**Completed Tasks** (Tasks 1-3):
1. ✅ **Rotation State Properties**: Added to CubeRenderer class
   - `rotationX`, `rotationY` - Current rotation angles
   - `isDragging` - Drag state tracking
   - `dragStartX`, `dragStartY` - Mouse position tracking
   - `dragStartRotationX`, `dragStartRotationY` - Rotation at drag start
   - `rotationSensitivity` - 0.4 degrees per pixel
   - Bound event handler properties for cleanup

2. ✅ **Drag Event Handlers**: Complete mouse interaction
   - `handleMouseDown()` - Start drag tracking, prevent defaults
   - `handleMouseMove()` - Update rotation based on mouse delta
   - `handleMouseUp()` - Stop drag, emit events
   - `handleMouseLeave()` - Cancel drag on mouse leave

3. ✅ **Rotation Control Methods**: Full rotation API
   - `applyRotation()` - Apply CSS transform to cube
   - `resetRotation()` - Animate back to default (-15°, 25°)
   - `setRotation(x, y, animate)` - Set specific angles
   - `getRotation()` - Get current rotation state

**Remaining Tasks** (Tasks 4-9):
- ⏳ Task 4: Create rotation reset button UI component
- ⏳ Task 5: Integrate rotation into render3DView
- ⏳ Task 6: Handle rotation state during view switching
- ⏳ Task 7: Update destroy method for cleanup
- ⏳ Task 8: Add CSS styles for rotation reset button
- ⏳ Task 9: Manual testing and refinement

**Technical Implementation**:
```javascript
// Rotation state in CubeRenderer
this.rotationX = -15;  // Default X rotation
this.rotationY = 25;   // Default Y rotation
this.rotationSensitivity = 0.4;  // Degrees per pixel

// Drag interaction
handleMouseMove(event) {
    if (!this.isDragging) return;
    const deltaX = event.clientX - this.dragStartX;
    const deltaY = event.clientY - this.dragStartY;
    this.rotationY = this.dragStartRotationY + (deltaX * this.rotationSensitivity);
    this.rotationX = this.dragStartRotationX - (deltaY * this.rotationSensitivity);
    this.applyRotation();
}

// Apply rotation
applyRotation() {
    const cubeElement = this.container.querySelector('.cube-3d');
    const transform = `rotateX(${this.rotationX}deg) rotateY(${this.rotationY}deg)`;
    cubeElement.style.transform = transform;
}
```

**Design Decisions**:
- Mouse drag for intuitive rotation control
- 0.4 degrees per pixel for responsive but precise control
- Rotation state preserved across view switches
- Reset button appears only when rotated >5° from default
- Smooth CSS transitions for natural feel
- Event-driven architecture with custom events

**Next Steps**:
1. Create rotation reset button with circular arrow icon
2. Integrate rotation handlers into render3DView
3. Preserve rotation state during view switching
4. Add CSS styles for reset button
5. Comprehensive testing across browsers

### Configuration System Implementation 🆕
**Date**: Recent
**Status**: ✅ Complete - Centralized API Configuration

**Files Created/Modified**:
- `scripts/config.js` - New centralized configuration module
- `scripts/cube-state.js` - Updated to use CONFIG
- `scripts/camera-capture.js` - Updated to use CONFIG
- `docs/API-CONFIGURATION-GUIDE.md` - Complete configuration guide

**Key Features**:
- Single source of truth for API endpoints
- Easy environment switching (dev/prod)
- Runtime configuration updates
- Consistent settings across all modules

**Benefits**:
- Change backend URL in one place
- No hardcoded URLs in components
- Easy deployment configuration
- Better maintainability

**Usage**:
```javascript
import { CONFIG, getApiUrl } from './config.js';

// Get full API URL
const url = getApiUrl('VALIDATE_CUBE');

// Access settings
const timeout = CONFIG.CAMERA.DETECTION_TIMEOUT;

// Update at runtime
setApiBaseUrl('http://production-server:5000');
```

### Backend Validation Integration ✅
**Date**: Recent
**Status**: ✅ Complete - Full Backend Validation

**Files Modified**:
- `scripts/cube-state.js` - Enhanced validation methods
- `scripts/validation-button.js` - Uses backend by default
- `tests/BACKEND-VALIDATION-UPDATE.md` - Complete documentation

**Key Features**:
- Frontend validation (length, characters, distribution)
- Backend validation (physical cube validity)
- Detailed error reporting with suggestions
- Graceful degradation if backend unavailable
- Color mapping validation

**Validation Flow**:
1. Frontend checks: length, characters, distribution, centers
2. Backend check: physical validity (if enabled)
3. Detailed error messages with fix suggestions
4. Warning vs error distinction

**Bug Fixes**:
- Fixed API URL to use full backend URL
- Corrected color mapping fallbacks
- Improved error handling and user feedback

### VERSION 2.0 - Color Editor Complete
**Date**: Previous
**Status**: ✅ Task 8 Complete - Color Editor Fully Implemented

**Files Modified**:
- `scripts/color-editor.js` - Complete ColorEditor class implementation
- `scripts/main.js` - Integration with main application (VERSION 2.0)
- `styles/main.css` - Color palette UI styles with responsive design
- `tests/test-color-editor.html` - Comprehensive test suite
- `docs/COLOR-EDITOR-GUIDE.md` - User documentation
- `tests/TASK8-IMPLEMENTATION-SUMMARY.md` - Implementation details
- `tests/TASK8-TESTING-GUIDE.md` - Testing guide

**Major Features Implemented**:
1. **Interactive Color Palette**:
   - 6 color buttons (White, Yellow, Red, Orange, Blue, Green)
   - Visual feedback for selected colors
   - Color labels with enhanced visibility
   - Smooth show/hide animations

2. **Sticker Selection**:
   - Click any sticker in 3D or net view
   - Blue border highlights selected sticker
   - Sticker info display shows face, position, and current color
   - Auto-clear after color application

3. **Two-Way Workflow**:
   - Select sticker first, then color (immediate application)
   - Select color first, then sticker (immediate application)
   - Flexible workflow adapts to user preference

4. **Cubestring Integration**:
   - Uses CubeState.setStickerColor() to update cubestring
   - Automatic renderer updates via change listeners
   - Maintains single source of truth architecture
   - Position mapping handled by CubeState helpers

5. **Responsive Design**:
   - Desktop: Fixed left side positioning
   - Mobile: Fixed bottom positioning
   - Touch-friendly button sizes
   - Adaptive layout for all screen sizes

**Technical Implementation**:
```javascript
// Main color application method
updateColor() {
    if (!this.selectedSticker || !this.selectedColor) return;
    
    const { face, row, col } = this.selectedSticker;
    
    // Update cubestring via CubeState
    this.cubeState.setStickerColor(face, row, col, this.selectedColor);
    
    // Clear selection after 500ms
    setTimeout(() => {
        this.cubeRenderer.clearSelection();
    }, 500);
}
```

**Testing Results**:
- ✅ Edit mode toggle works correctly
- ✅ Color selection updates UI state
- ✅ Sticker updates modify cubestring
- ✅ View synchronization maintains consistency
- ✅ Multiple edits work without issues
- ✅ Cubestring validation passes
- ✅ All automated tests passing (100%)

**User Experience**:
- Intuitive click-to-edit workflow
- Clear visual feedback at every step
- Smooth animations and transitions
- No lag or performance issues
- Works in both 3D and net views
- Mobile-friendly touch interactions

**Architecture Benefits**:
- Clean separation of concerns
- Event-driven communication
- No direct component coupling
- Easy to test and maintain
- Follows existing patterns
- Extensible for future features

**Next Steps**:
- Task 9: Implement cubestring validation methods
- Task 10: Write comprehensive integration tests
- Future: Add undo/redo functionality
- Future: Add keyboard shortcuts for colors

### VERSION 2.0.4 - Color Label Visibility Enhancement
**Date**: Previous Update
**Files Modified**: 
- `styles/main.css` - Enhanced color label visibility and contrast

**Changes Made**:
Improved color label styling for better readability on all color backgrounds:
```css
.color-palette__color-label {
    color: #fff;                          /* Changed from: #333 */
    text-shadow: 0 1px 3px rgba(0, 0, 0, 0.8);  /* Enhanced from: 0 1px 2px rgba(0, 0, 0, 0.5) */
    font-size: 0.9rem;
    font-weight: 600;
    background: rgba(0, 0, 0, 0.6);      /* Changed from: rgba(255, 255, 255, 0.9) */
    padding: 0.25rem 0.5rem;
    border-radius: 4px;
    pointer-events: none;
}
```

**Specific Changes**:
1. **Text Color**: Changed from dark gray (#333) to white (#fff)
2. **Text Shadow**: Increased opacity from 0.5 to 0.8 for stronger contrast
3. **Background**: Changed from white (rgba(255, 255, 255, 0.9)) to dark semi-transparent (rgba(0, 0, 0, 0.6))

**Rationale**:
- **Better Contrast**: White text on dark background provides better contrast on all color buttons
- **Universal Readability**: Works well on both light colors (White, Yellow, Orange) and dark colors (Red, Blue, Green)
- **Professional Appearance**: Dark overlay with white text is a common UI pattern for labels on colored backgrounds
- **Accessibility**: Higher contrast ratio improves readability for users with visual impairments
- **Consistency**: Matches the design pattern used in other parts of the application

**Before vs After**:
```
BEFORE: Dark text on white background
- Hard to read on light-colored buttons (White, Yellow)
- Inconsistent contrast across different colors
- White background competed with button colors

AFTER: White text on dark semi-transparent background
- Excellent readability on all color buttons
- Consistent contrast across all colors
- Dark overlay provides clear separation from button color
```

**Impact**:
- Color labels are now clearly readable on all six cube colors
- Improved user experience when selecting colors
- Better accessibility compliance (WCAG contrast ratios)
- More professional and polished appearance
- No functional changes - all color editing features work the same

**Visual Example**:
```
┌─────────────────────────┐
│  Color Palette          │
├─────────────────────────┤
│  ┌─────────────────┐   │
│  │ [White]         │   │  ← White text on dark overlay, readable on white button
│  └─────────────────┘   │
│  ┌─────────────────┐   │
│  │ [Yellow]        │   │  ← White text on dark overlay, readable on yellow button
│  └─────────────────┘   │
│  ┌─────────────────┐   │
│  │ [Red]           │   │  ← White text on dark overlay, readable on red button
│  └─────────────────┘   │
└─────────────────────────┘
```

### VERSION 2.0.3 - Color Palette Position Update
**Date**: Previous Update
**Files Modified**: 
- `styles/main.css` - Updated color palette positioning

**Change Made**:
Moved color palette from right side to left side of the screen:
```css
.color-palette {
    position: fixed;
    left: 20px;      /* Changed from: right: 20px */
    top: 50%;
    transform: translateY(-50%);
    /* ... other styles ... */
}
```

**Rationale**:
- Better visual balance with cube visualization on the right
- Reduces interference with cube controls and buttons
- More intuitive left-to-right workflow (select color → apply to cube)
- Improved ergonomics for right-handed users
- Consistent with common UI patterns (tools on left, content on right)

**Impact**:
- Color palette now appears on the left side of the screen (desktop)
- Mobile behavior unchanged (bottom-fixed positioning)
- No functional changes - all color editing features work the same
- Better visual hierarchy and screen space utilization

**Desktop Layout**:
```
┌─────────────────────────────────────────┐
│  Header                                 │
├──────────┬──────────────────────────────┤
│  Color   │                              │
│  Palette │     Cube Visualization       │
│  (Left)  │     (Center/Right)           │
│          │                              │
│          │     Controls (Bottom)        │
└──────────┴──────────────────────────────┘
```

**Mobile Layout** (unchanged):
```
┌─────────────────────────────────────────┐
│  Header                                 │
├─────────────────────────────────────────┤
│                                         │
│     Cube Visualization                  │
│     (Full Width)                        │
│                                         │
├─────────────────────────────────────────┤
│  Color Palette (Bottom)                 │
└─────────────────────────────────────────┘
```

### VERSION 2.0.2 - Color Palette Click-Through Fix
**Date**: Previous Update
**Files Modified**: 
- `styles/main.css` - Fixed color palette label click handling

**Issue Fixed**:
Color palette labels were blocking click events on the color buttons, making it difficult to select colors.

**Solution**:
Added `pointer-events: none` to `.color-palette__color-label` class:
```css
.color-palette__color-label {
    /* ... other styles ... */
    pointer-events: none; /* Allow clicks to pass through to button */
}
```

**Impact**:
- Clicks on color labels now pass through to the underlying button
- Improved user experience - entire button area is now clickable
- No need to click precisely around the label text
- Consistent click behavior across the entire color button

**Technical Details**:
The `pointer-events: none` CSS property makes the label element transparent to mouse events, allowing clicks to pass through to the parent button element. This is a common pattern for overlay text on interactive elements.

### VERSION 2.0.1 - ColorEditor Debug Enhancements
**Date**: Previous Update
**Files Modified**: 
- `scripts/color-editor.js` - Enhanced `enableEditMode()` method
- `docs_for_all.txt` - Updated documentation

**Changes in `color-editor.js`**:
Enhanced `enableEditMode()` method with detailed palette debugging:
```javascript
enableEditMode() {
    this.isEditMode = true;
    console.log('Edit mode enabled');
    console.log('Palette exists:', !!this.palette);
    console.log('Palette element:', this.palette);
    this.showColorPalette();
}
```

**New Debug Output**:
- `'Edit mode enabled'` - Confirms mode activation
- `'Palette exists: true/false'` - Verifies palette element exists
- `'Palette element: <div>...'` - Shows actual DOM element for inspection

**Why This Matters**:
- Helps diagnose palette visibility issues
- Verifies palette was created during initialization
- Shows exact DOM element state before `showColorPalette()` is called
- Makes it easier to identify if problem is in creation vs. display

**Troubleshooting Flow**:
1. Click "Edit Colors" button
2. Check console for "Edit mode enabled"
3. Verify "Palette exists: true" (if false, palette wasn't created)
4. Inspect palette element structure in console
5. Confirm `showColorPalette()` is called after logging

### VERSION 2.0 - Enhanced Debugging and Status Logging
**File**: `scripts/main.js`
**Changes**: Enhanced `handleEditClick()` method with comprehensive debugging

**Improvements**:
1. **Initialization Verification**: Logs whether ColorEditor exists on click
2. **State Logging**: Clear console output for edit mode state changes
3. **Success Indicators**: "✅ Edit mode ENABLED - Color palette should be visible"
4. **Error Handling**: "❌ ColorEditor not initialized!" with error logging
5. **User Feedback**: Improved notification messages with emoji indicators

**Debug Output**:
```javascript
// When edit button is clicked:
console.log('Edit button clicked - VERSION 2.0');
console.log('ColorEditor exists:', !!this.colorEditor);

// When enabled:
console.log('✅ Edit mode ENABLED - Color palette should be visible');

// When disabled:
console.log('❌ Edit mode DISABLED');

// If not initialized:
console.error('❌ ColorEditor not initialized!');
```

**Benefits**:
- Easier troubleshooting of color editor issues
- Clear visibility into component initialization state
- Better developer experience with detailed logging
- Helps identify integration problems quickly

### ColorEditor Implementation (Task 8 Complete)
- **Full implementation** of manual color editing functionality
- Interactive color palette with 6 standard cube colors
- Two-way workflow: select sticker then color, or color then sticker
- Real-time cubestring updates via CubeState integration
- Visual feedback for selections with auto-clear
- Comprehensive test suite in `tests/test-color-editor.html`
- Detailed usage guide in `docs/COLOR-EDITOR-GUIDE.md`

### Key Features Added
1. **Color Palette UI**: Fixed position panel with color buttons
2. **Sticker Selection**: Click any sticker in 3D or net view
3. **Color Selection**: Click any color from the palette
4. **Immediate Application**: Color applies as soon as both are selected
5. **Visual Feedback**: Highlighted selections with smooth transitions
6. **Auto-clear**: Selections clear after 500ms for better UX
7. **Enhanced Debugging**: Comprehensive logging in main.js (VERSION 2.0)

### Integration Points
- Uses `CubeRenderer` events for sticker selection
- Updates via `CubeState.setStickerColor()` method
- Automatic renderer updates via change listeners
- Works in both 3D and net views
- Preserves view state during editing
- Enhanced status logging in `main.js` for troubleshooting

### CSS Styling Updates
- **Removed CSS variables**: Replaced CSS custom properties with direct color values
- **Color Editor styles**: Updated to use explicit rgba() and hex colors
- **Improved consistency**: All color values now use standard CSS color notation
- **Better compatibility**: Removed dependency on CSS variables for broader browser support
- **Click-through fix**: Added `pointer-events: none` to color labels (VERSION 2.0.2)

**Changes in `styles/main.css`**:
- Background: `var(--card-bg)` → `rgba(255, 255, 255, 0.98)`
- Border: `var(--border-color)` → `#e0e0e0`
- Text colors: `var(--text-primary)` → `#333`, `var(--text-secondary)` → `#666`
- Primary color: `var(--primary-color)` → `#007bff`
- Secondary background: `var(--bg-secondary)` → `#f8f9fa`
- Color label: Added `pointer-events: none` for click-through (VERSION 2.0.2)

**Benefits**:
- No CSS variable fallback issues
- Consistent color rendering across all browsers
- Easier to understand and maintain
- Better performance (no variable resolution overhead)
- Improved clickability of color buttons (VERSION 2.0.2)

## Support

For issues or questions:
1. Check browser console for errors
2. Review test files for examples
3. Check implementation summaries in `tests/` directory
4. Verify backend is running and accessible
5. Review COLOR-EDITOR-GUIDE.md for color editing help ✨ NEW
