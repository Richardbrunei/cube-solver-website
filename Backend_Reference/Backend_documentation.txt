================================================================================
RUBIK'S CUBE COLOR DETECTION SYSTEM - API DOCUMENTATION
================================================================================

This document describes the key functions most likely to be imported and used
by other programs.

================================================================================
CAMERA_INTERFACE.PY - Camera and User Interaction Functions
================================================================================

1. capture_face(cam)
   Description: Capture and analyze one cube face, returning detected colors.
                Captures from a 3x3 grid of detection areas on the processed
                camera frame.
   
   Capture Specifications:
     - Frame Processing:
       • Input frame is mirrored horizontally (for natural interaction)
       • Cropped to square aspect ratio (centered)
       • Resized to 600x600 pixels (CAMERA_RESOLUTION)
       • White balance corrected
       • Adaptive brightness enhancement applied
     
     - Detection Grid:
       • 3x3 grid centered on frame
       • Grid spacing: 100 pixels (GRID_STEP)
       • Total grid size: 300x300 pixels
       • Grid position: Centered at (200, 200) to (500, 500)
     
     - Detection Areas:
       • 9 detection squares (one per sticker)
       • Each square: 40x40 pixels (DETECTION_SIZE * 2)
       • Centered at grid intersections
       • Positions (row, col):
         [0,0] [0,1] [0,2]
         [1,0] [1,1] [1,2]
         [2,0] [2,1] [2,2]
     
     - Color Detection:
       • Extracts 40x40 pixel patch from each position
       • Uses detect_color_advanced() for accurate detection
       • Returns colors in unmirrored order (compensates for flip)
   
   Parameters:
     - cam: OpenCV VideoCapture object
   
   Returns:
     - list: 9 color names in reading order (left-to-right, top-to-bottom)
             Format: ["White", "Red", "Green", ...] or ["X", ...] on error

================================================================================
COLOR_DETECTION.PY - Color Detection Functions
================================================================================

2. detect_color_advanced(patch, use_fast=False)
   Description: Advanced color detection using HSV ranges and multiple fallback
                methods. Main function for detecting Rubik's cube colors.
   Parameters:
     - patch: numpy.ndarray - Image patch to analyze
     - use_fast: bool - If True, uses simple averaging instead of KMeans
                        (default: False)
   Returns:
     - String: Detected color name or "Unknown"

3. get_dominant_color(patch, k=2)
   Description: Accurate dominant color extraction using KMeans clustering.
   Parameters:
     - patch: numpy.ndarray - Image patch to analyze
     - k: int - Number of color clusters to find (default: 2)
   Returns:
     - numpy.ndarray: Dominant BGR color [B, G, R]

================================================================================
CONFIG.PY - Configuration Constants
================================================================================

4. COLOR_TO_CUBE
   Description: Standard Rubik's cube notation mapping. Maps color names to
                single-letter cube notation.
   Type: dict
   Mapping: White→U, Red→R, Green→F, Yellow→D, Orange→L, Blue→B

5. Configuration Constants (config.py)
   Description: Adjustable parameters that affect capture behavior.
   
   CAMERA_RESOLUTION = (600, 600)
     • Processed frame size in pixels
     • Affects: Grid positioning, detection accuracy
     • Larger = more detail, slower processing
   
   GRID_STEP = 100
     • Distance between detection points in pixels
     • Affects: Grid spacing, total grid size
     • Formula: Total grid size = GRID_STEP * 2
   
   DETECTION_SIZE = 20
     • Radius of detection square in pixels
     • Affects: Sample area size (actual size = DETECTION_SIZE * 2)
     • Larger = more averaging, less precision
   
   BRIGHTNESS_ADJUSTMENT = 40
     • Base brightness boost value (0-100)
     • Affects: Image brightness, color detection in low light
     • Higher = brighter, may overexpose in good lighting
   
   PERFORMANCE_FRAME_SKIP = 5
     • Number of frames to skip between color detections
     • Affects: Live preview smoothness vs detection frequency
     • Higher = smoother video, less frequent color updates

================================================================================
CUBE_VALIDATION.PY - Cube Validation and Fixing Functions
================================================================================

6. validate_cube_state(cube_state, debug=False)
   Description: Validate cube state with step-by-step validation. Checks
                length, color counts, center pieces, edges, and corners.
   Parameters:
     - cube_state: list - 54 color names in face order
     - debug: bool - If True, print debugging information (default: False)
   Returns:
     - bool: True if valid, False if invalid

7. fix_cube_complete(cube_state)
   Description: Complete cube fixing process. Reorders faces by center pieces,
                then tries all 4096 rotation combinations to find first valid
                configuration.
   Parameters:
     - cube_state: list - 54 colors in capture order
   Returns:
     - tuple: (fixed_cube_state, face_mapping, rotations_applied, is_valid)
       - fixed_cube_state: list - Best cube state found
       - face_mapping: dict - Face reordering performed
       - rotations_applied: list - Rotation degrees for each face [0-270]
       - is_valid: bool - Whether a valid cube was found

================================================================================
IMAGE_PROCESSING.PY - Image Processing Utilities
================================================================================

8. correct_white_balance(image)
   Description: Correct white balance to remove color casts (like bluish tint
                from cameras).
   Parameters:
     - image: numpy.ndarray - Input image in BGR format
   Returns:
     - numpy.ndarray: White balance corrected image

9. adaptive_brighten_image(image, base_brightness=25)
   Description: Adaptively brighten image based on overall brightness level.
   Parameters:
     - image: numpy.ndarray - Input image
     - base_brightness: int - Base brightness adjustment (default: 25)
   Returns:
     - numpy.ndarray: Adaptively brightened image

================================================================================
CAPTURE SPECIFICATIONS DIAGRAM
================================================================================

Frame Layout (600x600 pixels):
┌────────────────────────────────────────────────────────────┐
│                                                            │
│                    (200, 200)                              │
│                        ┌──────────────────┐                │
│                        │  [0,0] [0,1] [0,2]│               │
│                        │   ■     ■     ■   │               │
│                        │                   │               │
│                        │  [1,0] [1,1] [1,2]│  3x3 Grid     │
│                        │   ■     ■     ■   │  (300x300)    │
│                        │                   │               │
│                        │  [2,0] [2,1] [2,2]│               │
│                        │   ■     ■     ■   │               │
│                        └──────────────────┘                │
│                                    (500, 500)              │
│                                                            │
└────────────────────────────────────────────────────────────┘

Detection Square Detail:
  • Each ■ represents a 40x40 pixel detection area
  • Spacing between centers: 100 pixels (GRID_STEP)
  • Detection size: ±20 pixels from center (DETECTION_SIZE)

Grid Positions (pixel coordinates from top-left):
  Position [0,0]: Center at (250, 250) → Area (230, 230) to (270, 270)
  Position [0,1]: Center at (350, 250) → Area (330, 230) to (370, 270)
  Position [0,2]: Center at (450, 250) → Area (430, 230) to (470, 270)
  Position [1,0]: Center at (250, 350) → Area (230, 330) to (270, 370)
  Position [1,1]: Center at (350, 350) → Area (330, 330) to (370, 370)
  Position [1,2]: Center at (450, 350) → Area (430, 330) to (470, 370)
  Position [2,0]: Center at (250, 450) → Area (230, 430) to (270, 470)
  Position [2,1]: Center at (350, 450) → Area (330, 430) to (370, 470)
  Position [2,2]: Center at (450, 450) → Area (430, 430) to (470, 470)

================================================================================
DATA STRUCTURES AND FORMATS
================================================================================

Cube State Format:
  - List of 54 color names (strings)
  - Order: White(0-8), Red(9-17), Green(18-26), Yellow(27-35), 
           Orange(36-44), Blue(45-53)
  - Each face is 9 stickers in reading order (left-to-right, top-to-bottom)

Face Layout (indices for each 3x3 face):
  0 1 2
  3 4 5
  6 7 8

Color Names:
  - Valid: "White", "Red", "Green", "Yellow", "Orange", "Blue"
  - Invalid: "Unknown", "X"

Cube Notation:
  - Single letters: U (Up/White), R (Right/Red), F (Front/Green),
                    D (Down/Yellow), L (Left/Orange), B (Back/Blue)

HSV Format:
  - Hue: 0-180 (OpenCV uses half of standard 0-360 range)
  - Saturation: 0-255
  - Value (Brightness): 0-255

BGR Format:
  - Blue: 0-255
  - Green: 0-255
  - Red: 0-255
  - Note: OpenCV uses BGR instead of RGB

================================================================================
END OF DOCUMENTATION
================================================================================
